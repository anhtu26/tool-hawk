// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define our models based on database schema design in the build plan

// User Management Schema
enum UserRole {
  admin
  manager
  operator
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  email        String    @unique
  passwordHash String
  firstName    String?
  lastName     String?
  role         UserRole  @default(operator)
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  preferences            UserPreference?
  refreshTokens          RefreshToken[]
  toolsCreated           Tool[]               @relation("ToolsCreatedByUser")
  toolsUpdated           Tool[]               @relation("ToolsUpdatedByUser")
  purchaseOrdersCreated  PurchaseOrder[]      @relation("PurchaseOrdersCreatedByUser")
  purchaseOrdersApproved PurchaseOrder[]      @relation("PurchaseOrdersApprovedByUser")
  documentUploads        DocumentAttachment[] @relation("DocumentUploadedByUser")
  checkouts              ToolCheckout[]       @relation("ToolCheckedOutByUser")
  checkins               ToolCheckout[]       @relation("ToolCheckedInByUser")
  auditLogs              AuditLog[]
  toolUsageCache         ToolUsageCache[]
}

model UserPreference {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences Json // { "theme": "dark", "notifications_enabled": true, "dashboard_layout": {} }
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique // Store hashed token
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Tool Categories Schema
enum AttributeType {
  TEXT
  NUMBER
  BOOLEAN
  DATE
  SELECT_SINGLE
  SELECT_MULTI
  RICH_TEXT
  FILE_ATTACHMENT // For attributes that are files themselves, distinct from general document_attachments
}

model ToolCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parentCategory  ToolCategory?       @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  childCategories ToolCategory[]      @relation("CategoryHierarchy")
  attributes      CategoryAttribute[]
  tools           Tool[]
  attributeGroups AttributeGroup[]

  @@unique([name, parentId]) // Name must be unique within the same parent
}

model AttributeGroup {
  id         String   @id @default(cuid())
  categoryId String
  name       String // For UI grouping of attributes
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category   ToolCategory        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attributes CategoryAttribute[]

  @@unique([categoryId, name])
}

model CategoryAttribute {
  id               String        @id @default(cuid())
  categoryId       String
  attributeGroupId String?
  name             String // machine-readable, e.g., cutting_diameter
  label            String // human-readable, e.g., "Cutting Diameter"
  attributeType    AttributeType
  isRequired       Boolean       @default(false)
  defaultValue     String?
  options          Json? // For SELECT types, e.g., [{ "value": "option1", "label": "Option 1" }]
  validationRules  Json? // e.g., { "minLength": 1, "maxLength": 255 } or { "min": 0, "max": 100 }
  sortOrder        Int           @default(0)
  tooltip          String? // For UI hints
  isFilterable     Boolean       @default(true)
  isSearchable     Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  category       ToolCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attributeGroup AttributeGroup? @relation(fields: [attributeGroupId], references: [id], onDelete: SetNull)

  @@unique([categoryId, name])
}

// Vendors Schema
model Vendor {
  id            String   @id @default(cuid())
  name          String   @unique
  contactPerson String?
  email         String? // Add validation in application layer
  phone         String?
  address       String?
  website       String? // Add URL validation in application layer
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  toolsAsPrimaryVendor Tool[]          @relation("PrimaryVendorForTool")
  purchaseOrders       PurchaseOrder[]
}

// Tools Schema
enum ToolStatus {
  ACTIVE
  INACTIVE
  UNDER_MAINTENANCE
  DISCONTINUED
  ARCHIVED
}

model Tool {
  id               String     @id @default(cuid())
  toolNumber       String     @unique
  name             String
  description      String?
  categoryId       String
  customAttributes Json // Will be indexed with GIN
  currentQuantity  Decimal    @default(0) @db.Decimal(10, 2)
  safeQuantity     Decimal    @default(0) @db.Decimal(10, 2)
  maxQuantity      Decimal?   @db.Decimal(10, 2)
  unitOfMeasure    String // e.g., "pcs", "mm", "inch"
  costPerUnit      Decimal?   @db.Decimal(12, 4) // Increased precision for cost
  primaryVendorId  String?
  locationInShop   String?
  imageUrl         String?
  status           ToolStatus @default(ACTIVE)
  lifespanExpected Int? // e.g., in hours or cycles
  lifespanUnit     String? // e.g., "hours", "cycles", "units_produced"
  createdByUserId  String
  updatedByUserId  String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  category            ToolCategory         @relation(fields: [categoryId], references: [id])
  primaryVendor       Vendor?              @relation("PrimaryVendorForTool", fields: [primaryVendorId], references: [id], onDelete: SetNull)
  createdBy           User                 @relation("ToolsCreatedByUser", fields: [createdByUserId], references: [id])
  updatedBy           User                 @relation("ToolsUpdatedByUser", fields: [updatedByUserId], references: [id])
  purchaseOrderItems  PurchaseOrderItem[]
  documentAttachments DocumentAttachment[] @relation("ToolDocuments") // Specific relation for tool documents
  checkouts           ToolCheckout[]

  @@index([toolNumber])
  @@index([categoryId])
  @@index([status])
  @@index([customAttributes], type: Gin) // Prisma might need specific syntax or this is a DB level command
}

// Purchase History Schema
enum PurchaseOrderStatus {
  DRAFT
  PENDING_APPROVAL
  ORDERED
  PARTIALLY_RECEIVED
  FULLY_RECEIVED
  CANCELLED
}

enum DocumentEntityType {
  PURCHASE_ORDER
  TOOL
  VENDOR
  CATEGORY_ATTRIBUTE // As per PRD, for attaching docs to specific attribute definitions
}

model PurchaseOrder {
  id                   String              @id @default(cuid())
  orderNumber          String              @unique
  vendorId             String
  orderDate            DateTime            @db.Date
  expectedDeliveryDate DateTime?           @db.Date
  actualDeliveryDate   DateTime?           @db.Date
  status               PurchaseOrderStatus @default(DRAFT)
  totalEstimatedCost   Decimal?            @db.Decimal(12, 2)
  totalActualCost      Decimal?            @db.Decimal(12, 2)
  shippingCost         Decimal?            @db.Decimal(10, 2)
  taxAmount            Decimal?            @db.Decimal(10, 2)
  paymentTerms         String?
  notes                String?
  createdByUserId      String
  approvedByUserId     String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  vendor              Vendor               @relation(fields: [vendorId], references: [id])
  createdBy           User                 @relation("PurchaseOrdersCreatedByUser", fields: [createdByUserId], references: [id])
  approvedBy          User?                @relation("PurchaseOrdersApprovedByUser", fields: [approvedByUserId], references: [id])
  items               PurchaseOrderItem[]
  documentAttachments DocumentAttachment[] @relation("PurchaseOrderDocuments") // Specific relation

  @@index([orderNumber])
  @@index([vendorId])
  @@index([status])
}

model PurchaseOrderItem {
  id                  String    @id @default(cuid())
  purchaseOrderId     String
  toolId              String? // Nullable if it's a non-catalog item described by descriptionOverride
  descriptionOverride String? // For items not yet in Tool DB or custom one-off items
  quantityOrdered     Decimal   @db.Decimal(10, 2)
  quantityReceived    Decimal   @default(0) @db.Decimal(10, 2)
  unitCost            Decimal   @db.Decimal(12, 4) // Increased precision for cost
  // lineTotalCost will be a calculated field in application logic or views
  notes               String?
  lastReceivedDate    DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  tool          Tool?         @relation(fields: [toolId], references: [id], onDelete: SetNull)

  @@index([purchaseOrderId])
  @@index([toolId])
}

model DocumentAttachment {
  id               String             @id @default(cuid())
  displayName      String
  fileNameStorage  String             @unique // System-generated unique name for stored file
  filePath         String // Path in storage system
  mimeType         String
  fileSizeBytes    Int
  entityType       DocumentEntityType // PURCHASE_ORDER, TOOL, VENDOR, CATEGORY_ATTRIBUTE
  entityId         String // References PK of the related entity's table
  description      String?
  uploadedByUserId String
  createdAt        DateTime           @default(now())

  uploadedByUser User           @relation("DocumentUploadedByUser", fields: [uploadedByUserId], references: [id])
  // For specific relations if desired, though entityType/entityId is the main polymorphic link
  purchaseOrder  PurchaseOrder? @relation("PurchaseOrderDocuments", fields: [entityId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_document_attachment_purchase_order")
  tool           Tool?          @relation("ToolDocuments", fields: [entityId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_document_attachment_tool")
  // Vendor and CategoryAttribute attachments would be linked via application logic using entityId

  @@index([entityType, entityId])
  @@index([uploadedByUserId])
}

// Part History & Tool Check-out Schema
enum CheckoutStatus {
  CHECKED_OUT
  CHECKED_IN
  PARTIALLY_RETURNED
  OVERDUE
}

enum ToolConditionOnReturn {
  GOOD
  DAMAGED
  CONSUMED
  NEEDS_MAINTENANCE
}

model ToolCheckout {
  id                 String                 @id @default(cuid())
  toolId             String
  checkedOutByUserId String
  jobNumber          String?
  partNumber         String?
  machineId          String?
  quantityCheckedOut Decimal                @db.Decimal(10, 2)
  checkoutTime       DateTime               @default(now())
  expectedReturnTime DateTime?
  checkinTime        DateTime?
  checkedInByUserId  String?
  quantityReturned   Decimal?               @db.Decimal(10, 2)
  quantityConsumed   Decimal?               @db.Decimal(10, 2) // Calculated or entered
  conditionOnReturn  ToolConditionOnReturn?
  notesCheckout      String?
  notesCheckin       String?
  status             CheckoutStatus         @default(CHECKED_OUT)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt

  tool             Tool  @relation(fields: [toolId], references: [id])
  checkedOutByUser User  @relation("ToolCheckedOutByUser", fields: [checkedOutByUserId], references: [id])
  checkedInByUser  User? @relation("ToolCheckedInByUser", fields: [checkedInByUserId], references: [id])

  @@index([toolId])
  @@index([checkedOutByUserId])
  @@index([jobNumber])
  @@index([partNumber])
  @@index([status])
  @@index([checkoutTime])
}

model ToolUsageCache {
  id         String   @id @default(cuid())
  userId     String
  jobNumber  String
  partNumber String?
  machineId  String?
  lastUsedAt DateTime @default(now()) @updatedAt // Update timestamp on each use

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobNumber, partNumber, machineId]) // Ensure one cached entry per combination per user
}

// Audit Logging Schema
model AuditLog {
  id            String   @id @default(cuid())
  userId        String? // Nullable for system-initiated actions
  actionType    String // e.g., "USER_LOGIN", "TOOL_CREATE"
  entityType    String? // e.g., "Tool", "User"
  entityId      String? // References PK of the entity_type table
  detailsBefore Json? // State before change
  detailsAfter  Json? // State after change or action specifics
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([timestamp])
  @@index([userId])
  @@index([actionType])
  @@index([entityType, entityId])
}
